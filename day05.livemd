# Day 5

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

## Intro

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

## Parsing/Shared

```elixir
defmodule Day5Shared do
  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&String.split(&1, " -> ", trim: true))
    |> Enum.map(fn [left, right] ->
      [x1, y1] =
        left
        |> String.split(",")
        |> Enum.map(&String.to_integer/1)

      [x2, y2] =
        right
        |> String.split(",")
        |> Enum.map(&String.to_integer/1)

      {x1, y1, x2, y2}
    end)
  end
end

parsed_input =
  input
  |> Kino.Input.read()
  |> Day5Shared.parse()
```

## Part 1

```elixir
parsed_input
# filter only vertical or horizontal lines (x1 == x2 or y1 == y2)
|> Enum.filter(fn
  {x, _, x, _} -> true
  {_, y, _, y} -> true
  _ -> false
end)
# comprehend ranges and list all points covered by lines segments
|> Enum.map(fn {x1, y1, x2, y2} ->
  for x <- x1..x2, y <- y1..y2 do
    {x, y}
  end
end)
|> List.flatten()
# find how many of the same coordinates covered by lines
|> Enum.frequencies()
|> Map.values()
# the number of points where at least two lines overlap
|> Enum.count(&(&1 >= 2))
```

## Part 2

```elixir
defmodule Day5Part2Solution do
  def solve(input) do
    input
    # comprehend ranges and list all points covered by lines segments
    |> Enum.map(&find_all_points/1)
    |> List.flatten()
    # find how many of the same coordinates covered by lines
    |> Enum.frequencies()
    |> Map.values()
    # the number of points where at least two lines overlap
    |> Enum.count(&(&1 >= 2))
  end

  defp find_all_points({xS, y1, xS, y2}),
    do: for(x <- xS..xS, y <- y1..y2, do: {x, y})

  defp find_all_points({x1, yS, x2, yS}),
    do: for(x <- x1..x2, y <- yS..yS, do: {x, y})

  defp find_all_points({x1, y1, x2, y2}) do
    slope_steps = abs(x1 - x2)

    1..slope_steps
    |> Enum.reduce({[{x1, y1}], {x2, y2}}, fn _, {[{x1, y1} | _] = points, {x2, y2}} ->
      point = next_point({x1, y1}, {x2, y2})

      {[point | points], {x2, y2}}
    end)
    |> elem(0)
  end

  defp next_point({x1, y1}, {x2, y2}) when x1 < x2 and y1 < y2,
    do: {x1 + 1, y1 + 1}

  defp next_point({x1, y1}, {x2, y2}) when x1 > x2 and y1 < y2,
    do: {x1 - 1, y1 + 1}

  defp next_point({x1, y1}, {x2, y2}) when x1 < x2 and y1 > y2,
    do: {x1 + 1, y1 - 1}

  defp next_point({x1, y1}, {x2, y2}) when x1 > x2 and y1 > y2,
    do: {x1 - 1, y1 - 1}
end

parsed_input
|> Day5Part2Solution.solve()
```
