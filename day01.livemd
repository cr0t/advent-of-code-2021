# Day 1

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

## Intro

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

## Part 1

```elixir
input
|> Kino.Input.read()
|> String.splitter("\n", trim: true)
|> Stream.map(&String.to_integer/1)
|> Stream.chunk_every(2, 1, :discard)
|> Enum.count(fn [left, right] -> right > left end)
```

## Part 2

```elixir
input
|> Kino.Input.read()
|> String.splitter("\n", trim: true)
|> Stream.map(&String.to_integer/1)
|> Stream.chunk_every(3, 1, :discard)
|> Stream.map(&Enum.sum/1)
|> Stream.chunk_every(2, 1, :discard)
|> Enum.count(fn [left, right] -> right > left end)
```

### Jose's Alternative

We do not need to calculate intermediary sums: it is enough to compare measures that are
different (first from left group, and last from right group, the other measurements
are the same).

So, `Stream.map(&Enum.sum/1)` step from the previous section is redundant.

```elixir
input
|> Kino.Input.read()
|> String.splitter("\n", trim: true)
|> Stream.map(&String.to_integer/1)
|> Stream.chunk_every(3, 1, :discard)
|> Stream.chunk_every(2, 1, :discard)
|> Enum.count(fn [[left, m1, m2], [m1, m2, right]] -> right > left end)
```
