# Day 12

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])
```

## Intro

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

## Parsing/Shared

```elixir
defmodule Day12Shared do
  def parse(input) do
    input
    |> Kino.Input.read()
    |> String.split(["\n"], trim: true)
    |> Enum.map(&String.split(&1, "-"))
    |> simple_graph()
  end

  defp simple_graph(connections) do
    connections
    |> Enum.reduce(%{}, fn [a, b], graph ->
      graph
      |> Map.update(a, [b], &[b | &1])
      |> Map.update(b, [a], &[a | &1])
    end)
  end
end
```

## Part 1

```elixir
defmodule Day12Part1Solution do
  def solve(graph) do
    graph
    |> walk("start", [])
    # |> IO.inspect()
    # ^^^
    # Check this output: I don't like the deep List of Lists I've got here, but non-empty
    # ones that inside it are the actual paths `walk/3` found...
    # But then I have to flatten them all and dig up by "end" elements to count:
    |> List.flatten()
    |> Enum.reduce({[], []}, fn
      "end", {all_paths, path} -> {[["end" | path] | all_paths], []}
      el, {all_paths, path} -> {all_paths, [el | path]}
    end)
    |> elem(0)
    |> Enum.count()
  end

  defp walk(_, "end", path), do: ["end" | path] |> Enum.reverse()

  defp walk(graph, node, path) do
    # IO.inspect({path, node, graph[node]}, label: "walk")

    for next <- graph[node], not visited?(next, path) do
      walk(graph, next, [node | path])
    end
  end

  defp visited?(node, path), do: small?(node) and node in path
  defp small?(node), do: node == String.downcase(node)
end

input
|> Day12Shared.parse()
|> Day12Part1Solution.solve()
```

## Part 2

```elixir
defmodule Day12Part2Solution do
  def solve(graph) do
    graph
    |> walk(graph["start"], MapSet.new(), false, ["start"], [])
    |> Enum.count()
  end

  defp walk(graph, ["end" | caves], visited, once?, path, paths) do
    walk(graph, caves, visited, once?, path, [["end" | path] | paths])
  end

  defp walk(graph, [cave | caves], visited, once?, path, paths) do
    paths =
      cond do
        cave == "start" or (cave in visited and once?) ->
          paths

        cave in visited ->
          walk(graph, graph[cave], MapSet.put(visited, cave), true, [cave | path], paths)

        small?(cave) ->
          walk(graph, graph[cave], MapSet.put(visited, cave), once?, [cave | path], paths)

        true ->
          walk(graph, graph[cave], visited, once?, [cave | path], paths)
      end

    walk(graph, caves, visited, once?, path, paths)
  end

  defp walk(_graph, [], _visited, _once?, _path, paths), do: paths

  defp small?(cave), do: cave == String.downcase(cave)
end

input
|> Day12Shared.parse()
|> Day12Part2Solution.solve()
```
